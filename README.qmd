---
title: chattr
format: md
---

<!-- badges: start -->

[![R-CMD-check](https://github.com/mlverse/chattr/actions/workflows/R-CMD-check.yaml/badge.svg)](https://github.com/mlverse/chattr/actions/workflows/R-CMD-check.yaml) [![Codecov test coverage](https://codecov.io/gh/mlverse/chattr/branch/main/graph/badge.svg)](https://app.codecov.io/gh/mlverse/chattr?branch=main) [![CRAN status](https://www.r-pkg.org/badges/version/chattr)](https://CRAN.R-project.org/package=chattr) [![](man/figures/lifecycle-experimental.svg)](https://lifecycle.r-lib.org/articles/stages.html#experimental)

<!-- badges: end -->

![](man/figures/readme/chattr.gif)

```{r}
#| echo: false
#| eval: false

source("utils/toc.R")
toc()

```

```{r}
#| echo: false
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)

pkg <- pkgdown::as_pkgdown()
urls <- pkg$desc$get_urls()
url <- urls[grepl(".io", urls)][[1]]
```

<!-- toc: start -->
- [Intro](#intro)
- [Install](#install)
- [Available models](#available-models)
- [Using](#using)
    - [The App](#the-app)
    - [Additional ways to interact](#additional-ways-to-interact)
- [How it works](#how-it-works)
- [Keyboard Shortcut](#keyboard-shortcut)
    - [How to setup the keyboard shortcut](#how-to-setup-the-keyboard-shortcut)

<!-- toc: end -->

## Intro {#intro}

`chattr` is an interface to LLMs (Large Language Models). It enables interaction 
with the model directly from the RStudio IDE. `chattr` allows you to submit a 
prompt to the LLM from your script, or by using the provided Shiny Gadget.

`chattr`'s main goal is to aid in EDA tasks. The additional information appended 
to your request, provides a sort of "guard rails", so that the packages and 
techniques we usually recommend as best practice, are used in the model's 
responses.

## Install {#install}

Since this is a very early version of the package install the package from Github:

```{r}
#| eval: false
remotes::install_github("mlverse/chattr")
```


## Available models {#available-models}

`chattr` provides two main integration with two main LLM back-ends. Each back-end 
provides access to multiple LLM types:

|                         Provider                          |                                                                                                     Models                                                                                                      |                 Setup Instructions                  |
|:-----------------:|:----------------------------------:|:-----------------:|
|  [OpenAI](https://platform.openai.com/docs/introduction)  |                                          GPT Models accessible via the OpenAI's REST API. `chattr` provides a convenient way to interact with GPT 4, 3.5, and DaVinci 3.                                           | [Interact with OpenAI GPT models](`r url`articles/openai-gpt.html)  |
| [LLamaGPT-Chat](https://github.com/kuvaus/LlamaGPTJ-chat) | LLM models available in your computer. Including GPT-J, LLaMA, and MPT. Tested on a [GPT4ALL](https://gpt4all.io/index.html) model. **LLamaGPT-Chat** is a command line chat program for models written in C++. |                      [Interact with local models](`r url`articles/backend-llamagpt.html)                    |

The idea is that as time goes by, more back-ends will be added.

## Using {#using}

### The App {#the-app}

The main way to use `chattr` is through the Shiny Gadget app. By default, it 
runs inside the Viewer pane:

```{r}
#| eval: false
chattr::chattr_app()
```

![Screenshot of the Sniny gadget app in a dark mode RStudio theme](man/figures/readme/chat1.png)

After the LLM finishes its response, the `chattr` app processes all markdown
code chunks. It will place three convenience buttons:

- **Copy to clipboard** - It will write the code inside the chunk to your clipboard.

- **Copy to document** - It will copy-paste the code directly to where the app was 
called from. If the app is started while working on a script, `chattr` will 
copy the code to that same script.

- **Copy to new script** - It creates a new R script in the RStudio IDE, and 
copies the content of the chunk directly to it. Very useful when the LLM writes 
a Shiny app for you

A lot of effort was put in to make the app's appearance as close as possible to 
the IDE. This way it feels more integrated with your work space. This includes 
switching the color scheme based on the current RStudio theme being light, or 
dark.

The settings screen can be accessed by clicking on the "gear" button. The 
screen that opens will contain the following:

- Save and Open chats - This is an early experiment to allow us to save and
retrieve past chats.  `chattr` will save the file in an RDS format.  The main
objective of this feature, is to be able to see past chats, not to continue 
previous conversations with the LLM.

- Prompt settings - In this section you can change the additional information
attached to your prompt. Including the number of max data files, and data
frames sent to the LLM. 

![Screenshot of the Sniny gadget options](man/figures/readme/chat2.png)

### Additional ways to interact {#additional-ways-to-interact}

Apart from the Shiny app, `chattr` provides two more ways to interact with the
LLM. For details, see: [Other interfaces](`r url`articles/other-interfaces.html)

## How it works {#how-it-works}

`chattr` enriches your request with additional instructions, name and structure 
of data frames currently in your environment, the path for the data files in
your working directory. If supported by the model, `chattr` will include the 
current chat history.

![Diagram that illustrates how chattr handles model requests](man/figures/readme/chattr-diagram.png)

To see what `chattr` will send to the model, set the `preview` argument to `TRUE`:

```{r}
library(chattr)

data(mtcars)
data(iris)

chattr(preview = TRUE)
```

## Keyboard Shortcut {#keyboard-shortcut}

The best way to access `chattr`'s app is by setting up a keyboard shortcut for 
it. This package includes an RStudio Addin that gives us direct access to the 
app, which in turn, allows a **keyboard shortcut** to be assigned to the addin.
The name of the addin is: "Open Chat". If you are not familiar with how to 
assign a keyboard shortcut see the next section. 

### How to setup the keyboard shortcut {#how-to-setup-the-keyboard-shortcut}

-   Select *Tools* in the top menu, and then select *Modify Keyboard Shortcuts*

    ![Screenshot that shows where to find the option to modify the keyboard shortcuts](man/figures/readme/keyboard-shortcuts.png){width="700"}

-   Search for the `chattr` adding by writing "open chat", in the search box

    ![Screenshot that shows where to input the addin search](man/figures/readme/addin-find.png){width="500"}

-   To select a key combination for your shortcut, click on the Shortcut box and then type *press* the key combination in your keyboard. In my case, I chose *Ctrl+Shift+C*

    ![Screenshot that shows what the interface looks like when a shortcut has been selected](man/figures/readme/addin-assign.png){width="500"}
